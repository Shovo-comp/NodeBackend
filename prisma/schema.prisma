generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?    @unique     
  phone         String     @unique
  email         String?    @unique
  otp           String?  
  otpExpiry     DateTime?
  role          String     @default("user") // Could be admin, super admin, or worker
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  password      String?  
  token         String?  
  location      String?     // Location of the worker for booking proximity
  profilePic    String?     // URL to the profile picture (uploaded to Supabase)


}

model Worker {
  id             Int       @id @default(autoincrement())
  name           String
  phone          String    @unique
  email          String    @unique
  profilePic     String?   // URL to the profile picture (uploaded to Supabase)
  bio            String?   // Brief description of worker's experience
  skills         String[]  // Array of skills (e.g., ["plumbing", "painting"])
  isAvailable    Boolean   @default(true) // Availability status
  location       String?   // Location of the worker for booking proximity
  services       Service[] @relation("WorkerServices") // Services the worker can offer
  otp            String?
  otpExpiry      DateTime?
  password       String?
  token          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           String @default("worker")
}

model Category {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  description   String?
  jobs          Job[]
  services      Service[]
  images        Image[]   // Images associated with the category
}

model Service {
  id             Int       @id @default(autoincrement())
  title          String
  description    String
  categoryId     Int
  category       Category  @relation(fields: [categoryId], references: [id])
  price          Float
  workers        Worker[]  @relation("WorkerServices")
  images         Image[]   // Images associated with the service
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Job {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  categoryId    Int
  bookingsCount Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  category      Category  @relation(fields: [categoryId], references: [id])
  images        Image[]   // Images associated with the job
}

model Image {
  id            Int       @id @default(autoincrement())
  url           String
  jobId         Int?      // Optional job ID for job images
  serviceId     Int?      // Optional service ID for service images
  categoryId    Int?      // Optional category ID for category images
  job           Job?      @relation(fields: [jobId], references: [id])
  service       Service?  @relation(fields: [serviceId], references: [id])
  category      Category? @relation(fields: [categoryId], references: [id])
}